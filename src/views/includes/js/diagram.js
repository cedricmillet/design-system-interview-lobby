
const getContainer = () => document.getElementById('interview-container')
const OBJECT_CLASSNAME = 'obj';

const diagram = {
    //  Adds an element to diagram
    addElement: function (type) {
        const elem = createDiagramElement(type);
        getContainer().appendChild(elem);
        Lobby.updateDiagram()
    },
    toJSON: () => Array.from(getContainer().children).map(elem => {
        return {
            uuid: elem.getAttribute('data-uuid'),
            type: elem.getAttribute('data-type'),
            pos: [elem.offsetLeft, elem.offsetTop],
        }
    }),

}



const createDiagramElement = (type) => {
    console.log(`Create diagram element: `, type)
    const elem = document.createElement('div');

    //  Adds element uniqID (TODO: generated by server ?)
    elem.setAttribute('data-uuid', uuid())
    elem.setAttribute('data-type', type)

    //  adds shape style
    elem.classList.add(OBJECT_CLASSNAME);
    
    //  adds draggable events
    elem.onmousedown = function dragMouseDown(e) {
        e = e || window.event;
        e.preventDefault();
        // get the mouse cursor position at startup:
        pos3 = e.clientX;
        pos4 = e.clientY;
        document.onmouseup = () => {  // stop moving when mouse button is released:
            document.onmouseup = null;
            document.onmousemove = null;
        };
        // call a function whenever the cursor moves:
        document.onmousemove = function elementDrag(e) {
            e = e || window.event;
            e.preventDefault();
            // calculate the new cursor position:
            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;
            // set the element's new position:
            elem.style.top = (elem.offsetTop - pos2) + "px";
            elem.style.left = (elem.offsetLeft - pos1) + "px";
        }
    }

    return elem;
}